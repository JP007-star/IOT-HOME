/Importing of Header File/
#include <ESP8266WiFi.h>
#include <FirebaseArduino.h>


/*Defining of Constants */
#define Current      D0
#define Voltage      D1
#define Fan          D2
#define Lamp         D3
#define Trigger      D4
#define Echo         D5
#define Temperature  D6
#define WaterPump    D7
#define Ldr      D8

/FireBase RealTime DataBase Setup/

#define FIREBASE_HOST "homeautomation-79647-default-rtdb.firebaseio.com"
#define FIREBASE_AUTH "PAcQHnXsnP17rmTzCWMlkJ3m5ojAir8fVkXqKQQM"

/Wifi Connection Credentials/

#define WIFI_SSID "Jp"
#define WIFI_PASSWORD "Prasad66"
String FanStatus;
String LampStatus;
String WaterPumpStatus;
String TemperatureStatus;
int TemperatureData =0;
void setup() {
Serial.begin(115200);
/Wifi Connection Verfication/
WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
Serial.print("connecting");
while (WiFi.status() != WL_CONNECTED){
Serial.print(".");
delay(500);
}
Serial.println();
Serial.print("connected: ");
Serial.println(WiFi.localIP());
/Firebase Initialisation/
Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
/I/P Pin Configuration/
pinMode(Current, INPUT);
pinMode(Voltage, INPUT);
pinMode(Ldr, INPUT);
pinMode(Fan, OUTPUT);
pinMode(Lamp, OUTPUT);
pinMode(Trigger, OUTPUT);
pinMode(Echo, INPUT);
pinMode(Temperature, INPUT);
pinMode(WaterPump, OUTPUT);
}
void loop() {
FanStatus=Firebase.getString("FAN");
LampStatus=Firebase.getString("LAMP");
WaterPumpStatus=Firebase.getString("WaterPump");
TemperatureData = analogRead(Temperature);
TemperatureStatus =String(TemperatureData);
Firebase.setString("Room Temperature",TemperatureStatus);
Firebase.setString("Voltage",TemperatureStatus);
Firebase.setString("Water Level",TemperatureStatus);
Serial.println("Fan"+FanStatus);
Serial.println("Lamp"+LampStatus);
Serial.println("WaterPump"+WaterPumpStatus);
if (FanStatus=="ON"){
digitalWrite(Fan,HIGH);
Serial.println("Fan is On");
}
else
Serial.println("Fan is Off");
if(LampStatus=="ON"){
digitalWrite(Lamp,HIGH);
Serial.println("Lamp is On");
}
else
Serial.println("Lamp is Off");
if(WaterPumpStatus=="ON"){
digitalWrite(WaterPump,HIGH);
Serial.println("WaterPump is On");
}
else
Serial.println("WaterPump is Off");
delay(1000);




#include <dummy.h>
#include <ESP8266WiFi.h>
#include <FirebaseESP8266.h>

// Set these to run example.
#define FIREBASE_HOST "homeautomation-79647-default-rtdb.firebaseio.com"
#define FIREBASE_AUTH "PAcQHnXsnP17rmTzCWMlkJ3m5ojAir8fVkXqKQQM"
#define WIFI_SSID "Jp"
#define WIFI_PASSWORD "Prasad66"

#define Current D0
#define Voltage D1
#define Fan D2
#define Lamp D3
#define Trigger D4
#define Echo D5
#define Temperature D6
#define WaterPump D7
#define Ldr D8

// Declare the Firebase Data object in the global scope
FirebaseData firebaseData;

/* Define the FirebaseAuth data for authentication data */
FirebaseAuth auth;

/* Define the FirebaseConfig data for config data */
FirebaseConfig config;

// Declare global variables to store value
String fanStatus;
String lampStatus;
String waterPumpStatus;
String roomLight;
String current;
String voltage;
String temp;
String waterLevel;

const int TRIG_PIN = D4;
const int ECHO_PIN = D5;

void setup() {
  Serial.begin(115200); // Select the same baud rate if you want to see the data on Serial Monitor
  Serial.println("Serial communication started\n\n");

  connectToWiFi();

  pinMode(Current, INPUT);
  pinMode(Voltage, INPUT);
  pinMode(Ldr, INPUT);
  pinMode(Fan, OUTPUT);
  pinMode(Lamp, OUTPUT);
  pinMode(Trigger, OUTPUT);
  pinMode(Echo, INPUT);
  pinMode(Temperature, INPUT);
  pinMode(WaterPump, OUTPUT);

  /* Assign the database URL and database secret(required) */
  config.database_url = FIREBASE_HOST;
  config.signer.tokens.legacy_token = FIREBASE_AUTH;
  Firebase.begin(&config, &auth);

  Firebase.reconnectWiFi(true);
  delay(1000);
}

void loop() {
  readFirebaseValue("/Fan", fanStatus);
  readFirebaseValue("/WaterPump", waterPumpStatus);
  readFirebaseValue("/Lamp", lampStatus);
  readFirebaseValue("/Current", current);
  readFirebaseValue("/Voltage", voltage);
  readFirebaseValue("/Room Light", roomLight);
  readFirebaseValue("/Room Temperature", temp);
  readFirebaseValue("/Water Level", waterLevel);
  setFirebaseValue("/Room Temperature","24 C");

  int distance = measureDistance();
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  delay(1000);
  digitalWrite(Fan, fanStatus == "ON" ? HIGH : LOW);
  digitalWrite(Lamp, lampStatus == "ON" ? HIGH : LOW);
  digitalWrite(WaterPump, waterPumpStatus == "ON" ? HIGH : LOW);
}

void connectToWiFi() {
  Serial.print("Connecting to ");
  Serial.print(WIFI_SSID);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD); //try to connect with wifi
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  Serial.println();
  Serial.print("Connected to ");
  Serial.println(WIFI_SSID);
  Serial.print("IP Address is : ");
  Serial.println(WiFi.localIP()); //print local IP address
}

void readFirebaseValue(String path, String &value) {
  if (Firebase.getString(firebaseData, path.c_str())) {
    Serial.println("String Value Read Successfully");
    Serial.print(path + " Status: ");
    value = firebaseData.stringData();
    Serial.println(value);
    Serial.println("\n");
  } else {
    Serial.println("Failed to read string value from Firebase");
    Serial.println(firebaseData.errorReason());
  }
}

void setFirebaseValue(String path, String value) {
  if (Firebase.setString(firebaseData, path.c_str(), value.c_str())) {
    Serial.println("Value Set Successfully");
    Serial.print("Path: ");
    Serial.print(path);
    Serial.print(", Value: ");
    Serial.println(value);
    Serial.println("\n");
  } else {
    Serial.println("Failed to set value in Firebase");
    Serial.println(firebaseData.errorReason());
  }
}

int measureDistance() {
  // Clear the trigger pin
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);

  // Send a pulse to trigger pin
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  // Measure the duration of the pulse on echo pin
  long duration = pulseIn(ECHO_PIN, HIGH);

  // Print the duration for debugging
  Serial.print("Duration: ");
  Serial.println(duration);

  // Convert the duration to distance in cm
  int distance = duration * 0.034 / 2;

  return distance;
}

